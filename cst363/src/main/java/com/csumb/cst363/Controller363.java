package com.csumb.cst363;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller    
public class Controller363 {

	private Prescription _p;

	@Autowired
	private JdbcTemplate jdbcTemplate;



	/*
	 * Doctor requests form to create new prescription.
	 */
	@GetMapping("/prescription/new")
	public String newPrescripton(Model model) {
		model.addAttribute("prescription", new Prescription());
		return "prescription_create";
	}

	/* 
	 * Process the new prescription form.
	 * 1.  Validate that Doctor SSN exists and matches Doctor Name.
	 * 2.  Validate that Patient SSN exists and matches Patient Name.
	 * 3.  Validate that Drug name exists.
	 * 4.  Insert new prescription.
	 * Return error message and the filled in prescription form
	 *   or the prescription with the rxid number generated by the database.
	 */
	@PostMapping("/prescription")
	public String addPrescription(@Valid Prescription p, BindingResult result, Model model) {
		if (result.hasErrors()) {
			System.out.println("Binding error in addPrescription.");
		}
		System.out.println(p.toString());  // debug -- print form data to console

		/*
		 * replace following with code to validate the prescription 
		 * with the database and insert a new prescription
		 */

		// p.setRxid("RX1980031234");


		_p=p;


		model.addAttribute("prescription", p);

		/* 
		 * replace following statement with code to test for any validation 
		 * errors and return with message, or display the prescription
		 */

		// check doctor ssn or patient ssn or drag name
		int evaluatedNumber = checkDoctorPatientDrag(); 


		if (_p.getDoctorName() == null || _p.getDoctorName().trim().length()==0

				) 
		{
			model.addAttribute("message", "Doctor name can not be blank");
			return "prescription_create";
		}

		if (_p.getQuantity() <= 0)
		{

			model.addAttribute("message", "Quantity needs to be more than zero.");
			return "prescription_create";
		}

		if (evaluatedNumber == 1 )
		{
			model.addAttribute("message", "Doctor ssn does not match, provide a "
					+ "correct ssn for the doctor.");
			return "prescription_create";
		}

		if (evaluatedNumber == 2 )
		{
			model.addAttribute("message", "Patient ssn does not match, provide a "
					+ "correct ssn for the Patient.");
			return "prescription_create";
		}

		if (evaluatedNumber == 3 )
		{
			model.addAttribute("message", "Drug name does not match, provide a "
					+ "correct drug name.");
			return "prescription_create";
		}




		else 
		{
			// insert all records so far
			//String rxI = _p.getRxid();

			String sqlForDoctorID = "SELECT DoctorID FROM DoctorsInfo"
					+ " where SSN = '"+_p.getDoctor_ssn()+"'";
			Integer doctorID = jdbcTemplate.queryForObject(sqlForDoctorID, Integer.class);
			
			// verify doc ssn and name matches
			String sqlForDoctorName = "SELECT Lname FROM DoctorsInfo"
					+ " where SSN = '"+_p.getDoctor_ssn()+"'";
			String doctorName = jdbcTemplate.queryForObject(sqlForDoctorName, String.class);
			
			String [] docName = p.getDoctorName().split(" ");
			
			String docLname = null;
			
			if (docName.length == 1)
			{
				docLname = docName[0];
			}
			else
			{
				docLname = docName[1];
			}
			
			
			if (!doctorName.trim().equalsIgnoreCase(docLname))
			{
				model.addAttribute("message", "Doctor's last name and SSN combination do not match.");
				return "prescription_create";
			}
			
			
			

			String sqlForPatientID = "SELECT patientID FROM patients"
					+ " where SSN = '"+_p.getPatient_ssn()+"'";
			Integer patientID = jdbcTemplate.queryForObject(sqlForPatientID, Integer.class);
			
			// verify patient ssn and name matches
			
			String sqlForPaientName = "SELECT Lname FROM patients"
					+ " where SSN = '"+_p.getPatient_ssn()+"'";
			String patientName = jdbcTemplate.queryForObject(sqlForPaientName, String.class);
			String [] patiName = p.getPatientName().split(" ");
			
			String patiLname = null;
			if (patiName.length == 1)
			{
				patiLname = patiName[0];
			}
			else
			{
				patiLname = patiName[1];
			}
			
			
			
			if (!patientName.trim().equalsIgnoreCase(patiLname))
			{
				model.addAttribute("message", "Patient's last name and SSN combination do not match.");
				return "prescription_create";
			}
			
			
			
			

			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			Date date = new Date(System.currentTimeMillis());
			String orderDate = dateFormat.format(date);

			String sqlForDragID = "SELECT drugID FROM drugs"
					+ " where name = '"+_p.getDrugName().trim()+"'";
			Integer dragID = jdbcTemplate.queryForObject(sqlForDragID, Integer.class);


			int quantity = _p.getQuantity();

			//  start
			Connection conn = null;
			try {
				conn = jdbcTemplate.getDataSource().getConnection();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			PreparedStatement pstmt = null;
			ResultSet rs = null;

			try {
				String query = "insert into prescription (DoctorID, "
						+ "patientID, OrderDate, PharmacyID, drugID, "
						+ "quantity, orderFilled, DateOrderFilled) "
						+ "values (?,?,?,?,?,?,?,?)";

				pstmt = conn.prepareStatement(query,
						Statement.RETURN_GENERATED_KEYS);
				//pstmt = conn.prepareStatement(query);

				pstmt.setInt(1, doctorID);
				pstmt.setInt(2, patientID);
				pstmt.setString(3, orderDate);
				pstmt.setString(4, null);
				pstmt.setInt(5, dragID);
				pstmt.setInt(6, quantity);
				pstmt.setInt(7, 0);
				pstmt.setString(8, null);

				int i = pstmt.executeUpdate();

				rs = pstmt.getGeneratedKeys();


				//System.out.println("Generated prescription Id: "+rs.getInt(1));

				if(rs != null && rs.next()){
					System.out.println("Generated prescription Id: "+rs.getInt(1));

					int rxIdNum = rs.getInt(1);
					String idForPrescription = "RX"+String.valueOf(rxIdNum);

					p.setRxid(idForPrescription);
				}


				conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			// end


			// display now
			return "prescription_show";
		}
	}


	public int checkDoctorPatientDrag()
	{
		// 1 = doctor ssn invalid
		// 2 = patient ssn invalid
		// 3 = drag invalid
		// 4 = all good


		// ssn format check
		String DocSsn = _p.getDoctor_ssn().trim();
		
		int docS = SSNFormatCheck (DocSsn);

		if ( docS == 1)
		{
			return 1;
		}
		
		if ( docS == -2) // here ssn without - like 569251465
		{
			String one = DocSsn.substring(0, 3);
			String two = "-"+DocSsn.substring(3, 5);
			String three = "-"+DocSsn.substring(5);
			
			DocSsn = one+two+three;
		}
		
		

		String PatientSsn = _p.getPatient_ssn().trim();
		
		int patiSnn = SSNFormatCheck (PatientSsn);
		
		if ( patiSnn == 1)
		{
			return 2;
		}
		
		if ( patiSnn == -2) // here ssn without - like 569251465
		{
			String one = PatientSsn.substring(0, 3);
			String two = "-"+PatientSsn.substring(3, 5);
			String three = "-"+PatientSsn.substring(5);
			
			PatientSsn = one+two+three;
		}


		String sqlDocSnn = "select SSN from doctorsInfo"
				+ " where SSN = '"+DocSsn+"'";

		String sqlPatiSnn = "select SSN from patients"
				+ " where SSN = '"+PatientSsn+"'";
		String sqlDragName = "select name from drugs"
				+ " where name = '"+_p.getDrugName().trim()+"'";

		String [] queries = {sqlDocSnn,sqlPatiSnn, sqlDragName};

		int [] returnValue = {1,2,3,4};


		for (int i = 0; i < queries.length; i++)
		{
			String data;
			try {
				data = jdbcTemplate.queryForObject(queries[i], String.class);
			} catch (DataAccessException e) {
				// TODO Auto-generated catch block
				//e.printStackTrace();
				return returnValue[i];

			}	
		}

		_p.setDoctor_ssn(DocSsn); 
		_p.setPatient_ssn(PatientSsn);
		return returnValue[3];
	}


	public int SSNFormatCheck (String DocSsn)
	{
		// if format is good, send = -1;
		// if format is good but adding - is needed = -2,
		
		// 1 if ssn format not good
		
		if (DocSsn.length() == 9) {

			// ssn format is good
			return - 2;
		}

		else
		{
			if (DocSsn.contains("-")) {
				if (DocSsn.length() == 11) {
					// ssn format is good
					return - 1;
				}

				else {
					return 1;
				}
			}

			else {
				return 1;
			} 
		}
	}



	/* 
	 * patient requests the form to fill a prescription
	 */
	@GetMapping("/prescription/fill")
	public String getfillForm(Model model) {
		model.addAttribute("prescription", new Prescription());
		return "prescription_fill";
	}

	/*
	 * process the prescription fill form
	 * 1.  Validate that pharmacy name and pharmacy address are entered 
	 *     and uniquely identify one pharmacy.
	 * 2.  update prescription with pharmacyid, name and address.
	 * 3.  update prescription with today's date.
	 * Display updated prescription 
	 *   or if there is an error show the form with an error message.
	 */
	@PostMapping("/prescription/fill")
	public String processFillForm(@Valid Prescription p, BindingResult result, Model model) {
		if (result.hasErrors()) {
			System.out.println("Binding error in processFillForm.");
		}

		/*
		 * replace the following code with code to validate the pharmacy name and 
		 * address, and update the prescription
		 */


		/*
		 * replace the following statement with code to display error message 
		 * or the updated prescription
		 */

		
		_p = p;

		try {
			if ( _p.getPharmacyName() == null || _p.getPharmacyName().trim().length()==0 || 
					_p.getRxid() == null || _p.getRxid().trim().length()==0 ) 

			{
				   // model.addAttribute("prescription", _p);
				    model.addAttribute("message", "RX and pharmacy name cannot be blank.");
				    return "prescription_fill";
			}
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			//model.addAttribute("prescription", _p);
			model.addAttribute("message", "RX and pharmacy name cannot be blank.");
			return "prescription_fill";
		} 

		 


		// check / validate the pharmacy name and address, and update the prescription
		int evaluatedNumber = 0;

		try {
			evaluatedNumber = checkPharmacyInformation(p);

		} catch (NullPointerException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			evaluatedNumber = 0;
		} 




		// 1 = pharmacy name invalid
		// 2 = address invalid
		// 3 = all good








		/*
		_p.setPharmacyName(p.getPharmacyName());
		_p.setPharmacyAddress(p.getPharmacyAddress());
		_p.setPharmacyID("70012345");
		_p.setCost(12.504);
		_p.setDateFilled( new java.util.Date().toString() );

		 */
		_p = p;
		if (evaluatedNumber == 0)
		{
			model.addAttribute("prescription", _p);
			model.addAttribute("message", "RX is not valid.");
			return "prescription_fill";
		}



		if (evaluatedNumber == 1)
		{
			model.addAttribute("prescription", _p);
			model.addAttribute("message", "Pharmacy name is not valid.");
			return "prescription_fill";
		}


		if (evaluatedNumber == 2)
		{
			model.addAttribute("prescription", _p);
			model.addAttribute("message", "Pharmacy address is not valid.");
			return "prescription_fill";
		}


		if (evaluatedNumber == 3)

		{
			// work start from here


			int pharmacyId = 0;
			String sqlPharmacyID = "select PharmacyID from pharmacy"
					+ " where name = '"+p.getPharmacyName()+"'";

			try {
				pharmacyId = jdbcTemplate.queryForObject(sqlPharmacyID, Integer.class);
			} catch (DataAccessException e) {
				// TODO Auto-generated catch block
				//e.printStackTrace();

			}	


			double cost = 0;
			String sqlCost = "select priceAmount from price \r\n" + 
					"where drugID = (select drugID from drugs \r\n" + 
					"where name = '"+_p.getDrugName()+"')  and PharmacyID =  "+ pharmacyId;

			try {
				cost = jdbcTemplate.queryForObject(sqlCost, Double.class);
				cost = cost * _p.getQuantity();
			} catch (DataAccessException e) {
				// TODO Auto-generated catch block
				//e.printStackTrace();
				model.addAttribute("message", p.getPharmacyName()+" does not have "+ _p.getDrugName()+ ". Please enter a different pharmacy name and address. ");
				return "prescription_fill";

			}


			String phoneNumber = null;
			String phoneSql = "select phoneNumber from pharmacy"
					+ " where name = '"+p.getPharmacyName()+"'";

			try {
				phoneNumber = jdbcTemplate.queryForObject(phoneSql, String.class);
			} catch (DataAccessException e) {
				// TODO Auto-generated catch block
				//e.printStackTrace();

			}



			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			Date date = new Date(System.currentTimeMillis());
			String fillDate = dateFormat.format(date);

			System.out.println("pharmacy id : " + pharmacyId);
			System.out.println("drug cost : " + cost);
			System.out.println("date of filling : " + fillDate);


			_p.setPharmacyName(p.getPharmacyName());
			_p.setPharmacyAddress(p.getPharmacyAddress());
			_p.setPharmacyID(String.valueOf(pharmacyId));
			_p.setCost(cost);
			_p.setDateFilled( fillDate );
			_p.setPharmacyPhone(phoneNumber);

			// insert query 
			// presciption id, pharmacy id, orderFill boolean, dateofFilling

			String id = p.getRxid().trim().substring(2);




			String updateSql = "update prescription "+
					"set "+
					" PharmacyID = "+ pharmacyId +

					" , orderFilled = "+ 1 +

					" , DateOrderFilled = "+ "'"+fillDate +"'"+

					" where prescriptionID = "+ "'"+ id +"'"+
					";";


			// inserting data
			jdbcTemplate.update(updateSql);



			model.addAttribute("prescription", _p);
			return "prescription_show";
		}

		else
		{
			// model.addAttribute("prescription", _p);
			model.addAttribute("message", "RX or pharmacy name or both cannot be blank.");

			return "prescription_fill";
		}


	}



	public int checkPharmacyInformation(Prescription p)
	{
		// check / validate the pharmacy name and address, and update the prescription


		// 1 = check if RX is valid if valid get data like 
		// Doctor: ssn , name , Patient ssn , name, drug name and quantity

		ArrayList<Object> prescriptionData = new ArrayList<>();

		try {
			Connection conn = jdbcTemplate.getDataSource().getConnection();

			// prepare SQL statement with parameters
			PreparedStatement ps = null;
			String query = ""
					+ "select doc.SSN as doctorSsn, doc.Fname as doctorFname, doc.Lname as doctorLname, \r\n" + 
					"pati.SSN as patientSsn, pati.Fname as patientFname, pati.Lname as  patientLname, \r\n" + 
					"d.name as dragName, p.quantity\r\n" + 
					"from prescription p\r\n" + 
					"join doctorsinfo doc on p.DoctorID = doc.DoctorID\r\n" + 
					"join patients pati on p.patientID = pati.patientID\r\n" + 
					"join drugs d on p.drugID = d.drugID\r\n" + 
					"where p.prescriptionID = ?";
			ps = conn.prepareStatement(query);

			// set SQL parameters
			String id = p.getRxid().trim().substring(2);
			ps.setString(1, id);

			// execute SQL.  Make arraylist of Ratings from the result set of rows
			ResultSet rs = ps.executeQuery();


			int counter = 9;
			boolean isRXVAlid = false;
			
			while (rs.next()) {

				for (int i = 1; i < counter; i++)
				{
					prescriptionData.add(rs.getObject(i));
				}
				
				isRXVAlid = true;

			}
			
			conn.close();
			
			if (isRXVAlid == false)
			{
				System.out.println("RX is invalid or blank");

				// model.addAttribute("message", "RX or pharmacy name or both cannot be blank.");

				// return "prescription_fill";

				return 0;
			}
				
				
				
			//model.addAttribute("ratings", ratings);
			//return "ratings";	

			String docFname = null , docLname = null
					, patientFname = null , patientLname = null ;

			for (int i = 0; i <prescriptionData.size(); i++ )
			{
				if (i == 0)
					p.setDoctor_ssn(prescriptionData.get(i).toString());
				if (i == 1)
					docFname = prescriptionData.get(i).toString();
				if (i == 2)
					docLname = prescriptionData.get(i).toString();
				if (i == 3)
					p.setPatient_ssn(prescriptionData.get(i).toString());
				if (i == 4)
					patientFname = prescriptionData.get(i).toString();
				if (i == 5)
					patientLname = prescriptionData.get(i).toString();
				if (i == 6)
					p.setDrugName(prescriptionData.get(i).toString());
				if (i == 7)
					p.setQuantity((int)prescriptionData.get(i));

			}

			p.setDoctorName(docFname +" "+docLname);
			p.setDoctorName(patientFname +" "+patientLname);


		} catch (SQLException se) {
			System.out.println("Error:  FirstApp#reviews SQLException " + se.getMessage() );
			System.out.println("RX is invalid or blank");

			// model.addAttribute("message", "RX or pharmacy name or both cannot be blank.");

			// return "prescription_fill";

			return 0;
		}  



		//pharmacy name invalid
		// 2 = address invalid
		// 3 = all good

		String pharymacyNam = p.getPharmacyName().trim();
		p.setPharmacyName(pharymacyNam);

		String sqlPharmacyName = "select name from pharmacy"
				+ " where name = '"+p.getPharmacyName().trim()+"'";

		String sqlPharmacyAddress = "select address from pharmacy"
				+ " where name = '"+p.getPharmacyName().trim()+"'";



		// String [] queries = {sqlPharmacyName,sqlPharmacyAddress};

		// for now check only name pharmacy
		String [] queries = {sqlPharmacyName , sqlPharmacyAddress};

		int [] returnValue = {1,2,3};


		for (int i = 0; i < queries.length; i++)
		{
			String data;
			try {
				data = jdbcTemplate.queryForObject(queries[i], String.class);


				/*
				if (i == 0)
					if (!data.trim().equalsIgnoreCase(_p.getPharmacyName().trim()))
						{
							return returnValue[i];
						}


				 * if (i == 2) { String [] fulAddress = _p.getPharmacyAddress().split(" ");
				 * 
				 * String streetAddress =fulAddress[0]+" "+ fulAddress[1];
				 * 
				 * 
				 * }
				 */
				
				
				if (i == 1)
				{
					if ( ! p.getPharmacyAddress().trim().contains(data.trim()))
					{
						return returnValue[i];
					}
				}

			} catch (DataAccessException e) {
				// TODO Auto-generated catch block
				//e.printStackTrace();
				return returnValue[i];

			}	
		}

		return returnValue[2];
	}











	/*
	 * process search request for quantity used for each drug for a given pharmacy.
	 * input is pharmacyID, startDate and endDate
	 * output is drugName, quantity used to fill prescriptions
	 * 1.  validate pharmacyID 
	 */
	@GetMapping("/pharmacy")
	public String pharmacyReport(
			@RequestParam("pharmacyID") String pharmacyID,
			@RequestParam("startDate") String startDate,
			@RequestParam("endDate") String endDate,
			Model model) {
		System.out.println("pharamcy report. ID="+pharmacyID+", start="+startDate+", end="+endDate);  // for debug 
		
		
		
		if (pharmacyID.trim().equalsIgnoreCase(""))
		{
		
			model.addAttribute("pharmacyID", " Pharmacy ID cannot be empty.");
			return "pharmacy_report";
		}
		
		
		if (startDate.trim().equalsIgnoreCase(""))
		{
			model.addAttribute("startDate", " Start date cannot be empty.");
			return "pharmacy_report";
		}
		
		
		if (endDate.trim().equalsIgnoreCase(""))
		{
			
			model.addAttribute("endDate", " End date cannot be empty.");
			return "pharmacy_report";
		}
		
		
		

		// replace the following code with code to perform database search 
		// returning drugname and quantity used
		ArrayList<ReportElement1> drugs = new ArrayList<>();
		//drugs.add(new ReportElement1("Drug1", 5000));
		//drugs.add(new ReportElement1("Drug2", 15000));
		//drugs.add(new ReportElement1("Drug3", 7500));

		// start

		/*
		 * 


SELECT * FROM modulethree.prescription;

select d.name, sum(p.quantity) from prescription p 
join drugs d on p.drugID = d.drugID
where p.PharmacyID = 5 and (p.DateOrderFilled between '1940-11-09' and '2021-01-30')
group by p.drugID


		 */



		Connection conn = null;
		try {
			conn = jdbcTemplate.getDataSource().getConnection();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// prepare SQL statement with parameters
		PreparedStatement ps = null;
		String query = ""
				+ "select d.name, sum(p.quantity) from prescription p \r\n" + 
				"join drugs d on p.drugID = d.drugID\r\n" + 
				"where p.PharmacyID = ? and (p.DateOrderFilled between ? and ?)\r\n" + 
				"group by p.drugID";
		try {
			ps = conn.prepareStatement(query);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// set SQL parameters
		//String id = p.getRxid().trim().substring(2);
		int num = 0;
		try {
			num = Integer.parseInt(pharmacyID);
		} catch (NumberFormatException e2) {
			
			
			model.addAttribute("pharmacyID", "Pharmacy ID "+pharmacyID +" is not known in the system.");
			return "pharmacy_report";
			//e2.printStackTrace();
		}

		try {
			ps.setInt(1, num);
			ps.setString(2, startDate);
			ps.setString(3, endDate);


		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		// execute SQL.  Make arraylist of Ratings from the result set of rows
		ResultSet rs = null;
		try {
			rs = ps.executeQuery();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		
		boolean isQueryHasData = false;

		try {
			while (rs.next()) {

				drugs.add(new ReportElement1(rs.getString(1), rs.getInt(2)));
				isQueryHasData = true;

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			conn.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (isQueryHasData == false)
		{
			
			String sqlPharmacyName = "select name from pharmacy"
					+ " where PharmacyID = '"+pharmacyID+"'";
			
			try {
				String data = jdbcTemplate.queryForObject(sqlPharmacyName, String.class);
			} catch (DataAccessException e) {
				// TODO Auto-generated catch block
				//e.printStackTrace();
				 model.addAttribute("pharmacyID", "Pharmacy ID "+pharmacyID +" is not known in the system.");
				 return "pharmacy_report";
			}
			
			 model.addAttribute("pharmacyID", "Pharmacy ID "+pharmacyID +" has not filled any presciption yet.");
			 return "pharmacy_report";
		}


		// end

		if (drugs.size() == 0)
		{
			 model.addAttribute("pharmacyID", "Pharmacy ID "+pharmacyID +" is not known in the system.");
			 return "pharmacy_report";
		}


		model.addAttribute("startDate", startDate);
		model.addAttribute("endDate", endDate);
		model.addAttribute("pharmacyID", pharmacyID);
		model.addAttribute("report", drugs);


		return "pharmacy_report";
	}


	/* 
	 * process search request for FDA of quantity of drug prescribed by doctor
	 * input is drugname, date range
	 * output is doctor name, quantity prescribed
	 * 1.  validate the drug name (it may be a partial name of a drug)
	 */
	@GetMapping("/fda")
	public String fdaReport(
			@RequestParam("drug") String drug, 
			@RequestParam("startDate") String startDate,
			@RequestParam("endDate") String endDate,
			Model model) {
		System.out.println("fda report. drug="+drug+", start="+startDate+", end="+endDate);  // for debug

		/*
		 * replace following code with code to perform db search
		 * for drug quantity used by doctors
		 *
		 */
		
		
		
		
		if (drug.trim().equalsIgnoreCase(""))
		{
		
			model.addAttribute("drug", " Drug name cannot be empty.");
			return "fda_report";
		}
		
		
		if (startDate.trim().equalsIgnoreCase(""))
		{
			model.addAttribute("startDate", " Start date cannot be empty.");
			return "fda_report";
		}
		
		
		if (endDate.trim().equalsIgnoreCase(""))
		{
			
			model.addAttribute("endDate", " End date cannot be empty.");
			return "fda_report";
		}
		
		
		
		ArrayList<ReportElement1> drugs = new ArrayList<>();
		//drugs.add(new ReportElement1("Doctor No", 5000));
		//drugs.add(new ReportElement1("Doctor 007", 15000));


		// start


		

		Connection conn = null;
		try {
			conn = jdbcTemplate.getDataSource().getConnection();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// prepare SQL statement with parameters
		PreparedStatement ps = null;
		String query = " select doc.Fname,doc.Lname, sum(p.quantity), d.name from prescription p \r\n" + 
				"join doctorsinfo doc on p.DoctorID= doc.DoctorID\r\n" + 
				"join drugs d on p.drugID = d.drugID\r\n" + 
				"where d.name like ? and (p.DateOrderFilled between ? and ?)\r\n" + 
				"group by p.drugID, doc.Fname,doc.Lname";
		try {
			ps = conn.prepareStatement(query);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// set SQL parameters
		//String id = p.getRxid().trim().substring(2);


		try {
			ps.setString(1, "%"+drug.trim()+"%");
			ps.setString(2, startDate);
			ps.setString(3, endDate);


		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		// execute SQL.  Make arraylist of Ratings from the result set of rows
		ResultSet rs = null;
		try {
			rs = ps.executeQuery();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


			StringBuilder dragNames = new StringBuilder ();
		
		try {
			while (rs.next()) {

				//drugs.add(new ReportElement1(rs.getString(1), rs.getInt(2)));
				String name = rs.getString(1)+" "
						+rs.getString(2);
				
				drugs.add(new ReportElement1(name, rs.getInt(3)));
				dragNames.append(" "+rs.getString(4) + ",\t");


			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			conn.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}




		// end
		model.addAttribute("startDate", startDate);
		model.addAttribute("endDate", endDate);
		model.addAttribute("drug", dragNames.toString().
				subSequence(0, dragNames.toString().trim().length()));
		model.addAttribute("report", drugs);


		return "fda_report";
	}

	/*
	 * return JDBC Connection using jdbcTemplate in Spring Server
	 */
	private Connection getConnection() throws SQLException {
		Connection conn = jdbcTemplate.getDataSource().getConnection();
		return conn;
	}

}
